Description: An VPC (10.0.0.0/16) with internet gateway and routing table that allows full interaction between subnet and outside world.
Parameters:
  VPCCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC.
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for public subnet 1
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for public subnet 2
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for private subnet 1
    Type: String
    Default: 10.0.51.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for private subnet 2
    Type: String
    Default: 10.0.52.0/24

  AvailabilityZone1:
    Description: Please enter the name of the first Availability Zone.
    Type: String
    Default: us-east-1a

  AvailabilityZone2:
    Description: Please enter the name of the first Availability Zone.
    Type: String
    Default: us-east-1b

Resources:
  # We need a VPC.
  CloudShirtVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      Tags: # Good practice is to add tags!
        - Key: Name
          Value: CloudShirtVPC

  # Define internet gateway to allow access to the "outside world"
  CloudShirtInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CloudShirtInternetGateway

  # Connect internet gateway to VPC
  CloudShirtVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref CloudShirtInternetGateway
      VpcId: !Ref CloudShirtVPC

  # Define two (public) subnets on the /24 domain that automatically
  # assigns all instances a public ip on launch
  CloudShirtPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Ref AvailabilityZone1
      MapPublicIpOnLaunch: true
      VpcId: !Ref CloudShirtVPC
      Tags:
        - Key: Name
          Value: CloudShirtPublicSubnet1

  CloudShirtPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Ref AvailabilityZone2
      MapPublicIpOnLaunch: true
      VpcId: !Ref CloudShirtVPC
      Tags:
        - Key: Name
          Value: CloudShirtPublicSubnet2

  # Add a routing table (and route) to the VPC to route all traffic
  # via the internet gateway
  CloudShirtRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CloudShirtVPC
      Tags:
        - Key: Name
          Value: CloudShirtRouteTable

  # Default route to the internet gateway
  CloudShirtDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CloudShirtInternetGateway
      RouteTableId: !Ref CloudShirtRouteTable

  # Associate routing table to subnets
  CloudShirtSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CloudShirtRouteTable
      SubnetId: !Ref CloudShirtPublicSubnet1

  CloudShirtSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref CloudShirtRouteTable
      SubnetId: !Ref CloudShirtPublicSubnet2

  # Define two (private) subnets on the /24 domain
  CloudShirtPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Ref AvailabilityZone1
      VpcId: !Ref CloudShirtVPC
      Tags:
        - Key: Name
          Value: CloudShirtPrivateSubnet1

  CloudShirtPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Ref AvailabilityZone2
      VpcId: !Ref CloudShirtVPC
      Tags:
        - Key: Name
          Value: CloudShirtPrivateSubnet2

  CloudShirtEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP
      VpcId: !Ref CloudShirtVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

       ## NAT GATEWAY
      CloudShirtNatGateway:
        Type: AWS::EC2::NatGateway
        DependsOn: CloudShirtNatPublicIP
        Properties: 
          SubnetId: !Ref PublicSubnet1
          AllocationId: !GetAtt NatPublicIP.AllocationId

      ## ELASTIC IP
      CloudShirtNatPublicIP:
        Type: AWS::EC2::EIP
        DependsOn: CloudShirtVPC
        Properties:
          Domain: vpc
     
      ## PRIVATE ROUTING
      CloudShirtPrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref CloudShirtVPC
      
      CloudshirtPrivateRoute:
        Type: AWS::EC2::Route
        Properties:
          NatGatewayId: !Ref CloudShirtNatGateway
          RouteTableId: !Ref CloudShirtPrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
     
      CloudShirtPrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref CloudShirtPrivateSubnet1
          RouteTableId: !Ref CloudShirtPrivateRouteTable
     
      CloudShirtPrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref CloudShirtPrivateSubnet2
          RouteTableId: !Ref CloudShirtPrivateRouteTable


# Define outputs so values can be imported in another template
Outputs:
  CloudShirtVPCRef:
    Description: Reference to the VPC
    Value: !Ref CloudShirtVPC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", VPC ] ] # Fancy way of making the exported variable called "MyBase:VPC"
  CloudShirtVPCGatewayAttachmentRef:
    Description: Reference to the VPC gateway attachment
    Value: !Ref CloudShirtVPCGatewayAttachment
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", GatewayAttachment ] ]
  CloudShirtRouteTableRef:
    Description: Reference to the VPC route table
    Value: !Ref CloudShirtRouteTable
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", RouteTable ] ]
  CloudShirtPublicSubnet1Ref:
    Description: Reference to my first (public) subnet
    Value: !Ref CloudShirtPublicSubnet1
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PublicSubnet1 ] ]
  CloudShirtPublicSubnet2SubnetRef:
    Description: Reference to my second (public) subnet
    Value: !Ref CloudShirtPublicSubnet2
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PublicSubnet2 ] ]
  CloudShirtPrivateSubnet1Ref:
    Description: Reference to my first (private) subnet
    Value: !Ref CloudShirtPrivateSubnet1
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnet1 ] ]
  CloudShirtPrivateSubnet2Ref:
    Description: Reference to my second (private) subnet
    Value: !Ref CloudShirtPrivateSubnet2
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnet2 ] ]
  AvailabilityZone1Ref:
    Description: Reference to Availability Zone 1
    Value: !Ref AvailabilityZone1
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", AvailabilityZone1 ] ]
  AvailabilityZone2Ref:
    Description: Reference to Availability Zone 2
    Value: !Ref AvailabilityZone2
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", AvailabilityZone2 ] ]
  SecurityGroupId:
    Description: "The ID of the security group"
    Value: !Ref CloudShirtEC2SecurityGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SecurityGroupId ] ] # Fancy way of making the exported variable called "MyBase:Var"

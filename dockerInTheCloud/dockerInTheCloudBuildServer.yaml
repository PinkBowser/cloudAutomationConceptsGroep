Resources:
  CloudShirtBuildServer:
    Type: AWS::EC2::Instance
    Properties:
        BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true 
            VolumeType: gp3
            VolumeSize: 30
            Encrypted: "true" 
        InstanceType: t2.large 
        ImageId: ami-0ebfd941bbafe70c6 #Needs to be AMI 2023
        IamInstanceProfile: 'LabInstanceProfile'
        KeyName: vockey 
        SecurityGroupIds: 
          - !ImportValue  CloudShirt:SecurityGroupId 
        SubnetId: !ImportValue CloudShirt:PrivateSubnet1 # Deploy the instance in the public subnet in AZ.
        Tags:
          - Key: Name
            Value: cloudshirt-buildserver
        UserData: 
          Fn::Base64: !Sub
          - |
            #!/bin/bash
            # Update en installeer benodigde pakketten
            sudo yum update -y
            sudo yum upgrade -y
            sudo yum install -y git
            sudo yum install -y docker

            sudo usermod -a -G docker ec2-user

            sudo service docker start
            sudo systemctl enable docker

            sudo chmod 666 /var/run/docker.sock
            
            curl -SL https://github.com/docker/compose/releases/download/v2.29.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            sudo docker swarm init
          
            # Store the join token in AWS SSM Parameter Store
            JOIN_TOKEN=$(docker swarm join-token -q worker)
            echo "Swarm Token: $JOIN_TOKEN"
            aws ssm put-parameter --name /swarm/joinToken --value $JOIN_TOKEN --type String --overwrite

            aws ecr create-repository --repository-name eshopwebmvc
            aws ecr create-repository --repository-name eshoppublicapi

            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 093215643118.dkr.ecr.us-east-1.amazonaws.com

            sudo cd /root
            git clone https://github.com/Mystos16/CloudShirt.git
            cd CloudShirt/
            sed -i 's/Server.*CatalogDb;/Server=${RDSENDPOINT},1433;User ID=admin;Password=CloudShirt123;Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/' /root/CloudShirt/src/Web/appsettings.json
            sed -i 's/Server.*Identity;/Server=${RDSENDPOINT},1433;User ID=admin;Password=CloudShirt123;Initial Catalog=Microsoft.eShopOnWeb.Identity;/' /root/CloudShirt/src/Web/appsettings.json

            commands=$(cat << 'EOF'
            git pull
            docker-compose build
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 093215643118.dkr.ecr.us-east-1.amazonaws.com
            docker-compose push
            docker stack deploy -c docker-compose.yml eshop-stack -d
            EOF
            )

            # Define the cron job string
            cronjob="0 23 * * * $commands"

            # Check if the job already exists in the crontab
            (crontab -l | grep -F "$commands") && exit 0

            # Add the new cron job
            (crontab -l; echo "$cronjob") | crontab -
            
          - RDSENDPOINT:
              Fn::ImportValue: CloudShirtDB:DBEndpoint


Outputs:
  EC2InstanceId:
    Description: "The Instance ID of the EC2 instance"
    Value: !Ref CloudShirtBuildServer
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", EC2InstanceId ] ] # Fancy way of making the exported variable called "MyBase:Var"
  
  EC2InstanceIP:
    Description: "The IP of the EC2"
    Value: !GetAtt CloudShirtBuildServer.PrivateIp
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "PrivateIp"]]
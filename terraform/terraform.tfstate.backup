{
  "version": 4,
  "terraform_version": "1.9.7",
  "serial": 20,
  "lineage": "b0b1f244-5dff-5edb-b18b-dc38cab00bb5",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "github_repository_file",
      "name": "cloudshirt",
      "provider": "provider[\"registry.terraform.io/hashicorp/github\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": "PinkBowser",
            "commit_email": "lletterwinkel2@gmail.com",
            "commit_message": "nu ook 3000 openzetten",
            "commit_sha": "c99ee3579cdf15ff511c20c5362350734d404937",
            "content": "Description: An VPC (10.0.0.0/16) with internet gateway and routing table that allows full interaction between subnet and outside world.\nParameters:\n  VPCCIDR:\n    Description: Please enter the IP range (CIDR notation) for this VPC.\n    Type: String\n    Default: 10.0.0.0/16\n\n  PublicSubnet1CIDR:\n    Description: Please enter the IP range (CIDR notation) for public subnet 1\n    Type: String\n    Default: 10.0.1.0/24\n\n  PublicSubnet2CIDR:\n    Description: Please enter the IP range (CIDR notation) for public subnet 2\n    Type: String\n    Default: 10.0.2.0/24\n\n  PrivateSubnet1CIDR:\n    Description: Please enter the IP range (CIDR notation) for private subnet 1\n    Type: String\n    Default: 10.0.51.0/24\n\n  PrivateSubnet2CIDR:\n    Description: Please enter the IP range (CIDR notation) for private subnet 2\n    Type: String\n    Default: 10.0.52.0/24\n\n  AvailabilityZone1:\n    Description: Please enter the name of the first Availability Zone.\n    Type: String\n    Default: us-east-1a\n\n  AvailabilityZone2:\n    Description: Please enter the name of the first Availability Zone.\n    Type: String\n    Default: us-east-1b\n\nResources:\n  # We need a VPC.\n  CloudShirtVPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Ref VPCCIDR\n      EnableDnsHostnames: true\n      Tags: # Good practice is to add tags!\n        - Key: Name\n          Value: CloudShirtVPC\n\n  # Define internet gateway to allow access to the \"outside world\"\n  CloudShirtInternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n        - Key: Name\n          Value: CloudShirtInternetGateway\n\n  # Connect internet gateway to VPC\n  CloudShirtVPCGatewayAttachment:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      InternetGatewayId: !Ref CloudShirtInternetGateway\n      VpcId: !Ref CloudShirtVPC\n\n  # Define two (public) subnets on the /24 domain that automatically\n  # assigns all instances a public ip on launch\n  CloudShirtPublicSubnet1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      CidrBlock: !Ref PublicSubnet1CIDR\n      AvailabilityZone: !Ref AvailabilityZone1\n      MapPublicIpOnLaunch: true\n      VpcId: !Ref CloudShirtVPC\n      Tags:\n        - Key: Name\n          Value: CloudShirtPublicSubnet1\n\n  CloudShirtPublicSubnet2:\n    Type: AWS::EC2::Subnet\n    Properties:\n      CidrBlock: !Ref PublicSubnet2CIDR\n      AvailabilityZone: !Ref AvailabilityZone2\n      MapPublicIpOnLaunch: true\n      VpcId: !Ref CloudShirtVPC\n      Tags:\n        - Key: Name\n          Value: CloudShirtPublicSubnet2\n\n  # Add a routing table (and route) to the VPC to route all traffic\n  # via the internet gateway\n  CloudShirtRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref CloudShirtVPC\n      Tags:\n        - Key: Name\n          Value: CloudShirtRouteTable\n\n  # Default route to the internet gateway\n  CloudShirtDefaultRoute:\n    Type: AWS::EC2::Route\n    Properties:\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref CloudShirtInternetGateway\n      RouteTableId: !Ref CloudShirtRouteTable\n\n  # Associate routing table to subnets\n  CloudShirtSubnetRouteTableAssociation1:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref CloudShirtRouteTable\n      SubnetId: !Ref CloudShirtPublicSubnet1\n\n  CloudShirtSubnetRouteTableAssociation2:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref CloudShirtRouteTable\n      SubnetId: !Ref CloudShirtPublicSubnet2\n\n  # Define two (private) subnets on the /24 domain\n  CloudShirtPrivateSubnet1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      CidrBlock: !Ref PrivateSubnet1CIDR\n      AvailabilityZone: !Ref AvailabilityZone1\n      VpcId: !Ref CloudShirtVPC\n      Tags:\n        - Key: Name\n          Value: CloudShirtPrivateSubnet1\n\n  CloudShirtPrivateSubnet2:\n    Type: AWS::EC2::Subnet\n    Properties:\n      CidrBlock: !Ref PrivateSubnet2CIDR\n      AvailabilityZone: !Ref AvailabilityZone2\n      VpcId: !Ref CloudShirtVPC\n      Tags:\n        - Key: Name\n          Value: CloudShirtPrivateSubnet2\n\n  CloudShirtEC2SecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Allow SSH and HTTP\n      VpcId: !Ref CloudShirtVPC\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 443\n          ToPort: 443\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 5000\n          ToPort: 5000\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 3000\n          ToPort: 3000\n          CidrIp: 0.0.0.0/0\n      Tags:\n        - Key: Name\n          Value: CloudShirtEC2SecurityGroup\n\n  \n  ## NAT GATEWAY\n  CloudShirtEIP1:\n    Type: 'AWS::EC2::EIP'\n    Properties:\n      Domain: vpc\n\n  CloudShirtNATGateway1:\n    Type: 'AWS::EC2::NatGateway'\n    Properties:\n      SubnetId: !Ref CloudShirtPublicSubnet1\n      AllocationId: !GetAtt CloudShirtEIP1.AllocationId\n      Tags:\n        - Key: Name\n          Value: CloudShirtNATGateway1\n  \n  CloudShirtEIP2:\n    Type: 'AWS::EC2::EIP'\n    Properties:\n      Domain: vpc\n\n  CloudShirtNATGateway2:\n    Type: 'AWS::EC2::NatGateway'\n    Properties:\n      SubnetId: !Ref CloudShirtPublicSubnet2\n      AllocationId: !GetAtt CloudShirtEIP2.AllocationId\n      Tags:\n        - Key: Name\n          Value: CloudShirtNATGateway2\n\n  CloudShirtPrivateRouteTable1:\n    Type: 'AWS::EC2::RouteTable'\n    Properties:\n      VpcId: !Ref CloudShirtVPC\n      Tags:\n        - Key: Name\n          Value: CloudShirtPrivateRouteTable1\n\n  CloudShirtPrivateRouteTable2:\n    Type: 'AWS::EC2::RouteTable'\n    Properties:\n      VpcId: !Ref CloudShirtVPC\n      Tags:\n        - Key: Name\n          Value: CloudShirtPrivateRouteTable2\n\n  CloudShirtPrivateRoute1:\n    Type: 'AWS::EC2::Route'\n    Properties:\n      RouteTableId: !Ref CloudShirtPrivateRouteTable1\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref CloudShirtNATGateway1\n\n  CloudShirtPrivateRoute2:\n    Type: 'AWS::EC2::Route'\n    Properties:\n      RouteTableId: !Ref CloudShirtPrivateRouteTable2\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref CloudShirtNATGateway2\n\n  CloudShirtPrivateSubnet1RouteTableAssociation:\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\n    Properties:\n      SubnetId: !Ref CloudShirtPrivateSubnet1\n      RouteTableId: !Ref CloudShirtPrivateRouteTable1\n\n  CloudShirtPrivateSubnet2RouteTableAssociation:\n    Type: 'AWS::EC2::SubnetRouteTableAssociation'\n    Properties:\n      SubnetId: !Ref CloudShirtPrivateSubnet2\n      RouteTableId: !Ref CloudShirtPrivateRouteTable2\n\n# Define outputs so values can be imported in another template\nOutputs:\n  CloudShirtVPCRef:\n    Description: Reference to the VPC\n    Value: !Ref CloudShirtVPC\n    Export:\n      Name: !Join [ \":\", [ !Ref \"AWS::StackName\", VPC ] ] # Fancy way of making the exported variable called \"MyBase:VPC\"\n  CloudShirtVPCGatewayAttachmentRef:\n    Description: Reference to the VPC gateway attachment\n    Value: !Ref CloudShirtVPCGatewayAttachment\n    Export:\n      Name: !Join [ \":\", [ !Ref \"AWS::StackName\", GatewayAttachment ] ]\n  CloudShirtRouteTableRef:\n    Description: Reference to the VPC route table\n    Value: !Ref CloudShirtRouteTable\n    Export:\n      Name: !Join [ \":\", [ !Ref \"AWS::StackName\", RouteTable ] ]\n  CloudShirtPublicSubnet1Ref:\n    Description: Reference to my first (public) subnet\n    Value: !Ref CloudShirtPublicSubnet1\n    Export:\n      Name: !Join [ \":\", [ !Ref \"AWS::StackName\", PublicSubnet1 ] ]\n  CloudShirtPublicSubnet2SubnetRef:\n    Description: Reference to my second (public) subnet\n    Value: !Ref CloudShirtPublicSubnet2\n    Export:\n      Name: !Join [ \":\", [ !Ref \"AWS::StackName\", PublicSubnet2 ] ]\n  CloudShirtPrivateSubnet1Ref:\n    Description: Reference to my first (private) subnet\n    Value: !Ref CloudShirtPrivateSubnet1\n    Export:\n      Name: !Join [ \":\", [ !Ref \"AWS::StackName\", PrivateSubnet1 ] ]\n  CloudShirtPrivateSubnet2Ref:\n    Description: Reference to my second (private) subnet\n    Value: !Ref CloudShirtPrivateSubnet2\n    Export:\n      Name: !Join [ \":\", [ !Ref \"AWS::StackName\", PrivateSubnet2 ] ]\n  AvailabilityZone1Ref:\n    Description: Reference to Availability Zone 1\n    Value: !Ref AvailabilityZone1\n    Export:\n      Name: !Join [ \":\", [ !Ref \"AWS::StackName\", AvailabilityZone1 ] ]\n  AvailabilityZone2Ref:\n    Description: Reference to Availability Zone 2\n    Value: !Ref AvailabilityZone2\n    Export:\n      Name: !Join [ \":\", [ !Ref \"AWS::StackName\", AvailabilityZone2 ] ]\n  SecurityGroupId:\n    Description: \"The ID of the security group\"\n    Value: !Ref CloudShirtEC2SecurityGroup\n    Export:\n      Name: !Join [ \":\", [ !Ref \"AWS::StackName\", SecurityGroupId ] ] # Fancy way of making the exported variable called \"MyBase:Var\"\n",
            "file": "awsBasics/awsBasicsNetwerk.yaml",
            "id": "cloudAutomationConceptsGroep/awsBasics/awsBasicsNetwerk.yaml",
            "ref": "main",
            "repository": "cloudAutomationConceptsGroep",
            "sha": "3cb72988230c924e7b63b9af95439f4e55ebf852"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "cloudshirt",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": null,
            "arn": "arn:aws:s3:::cloudshirt",
            "bucket": "cloudshirt",
            "bucket_domain_name": "cloudshirt.s3.amazonaws.com",
            "bucket_prefix": "",
            "bucket_regional_domain_name": "cloudshirt.s3.us-east-1.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "grant": [
              {
                "id": "a72cd00909fa8d69331e18adfc56b09da2eb067f379b31d831f32578549b43e7",
                "permissions": [
                  "FULL_CONTROL"
                ],
                "type": "CanonicalUser",
                "uri": ""
              }
            ],
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "cloudshirt",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "object_lock_enabled": false,
            "policy": "",
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [
              {
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      {
                        "kms_master_key_id": "",
                        "sse_algorithm": "AES256"
                      }
                    ],
                    "bucket_key_enabled": false
                  }
                ]
              }
            ],
            "tags": {
              "Name": "cloudshirt"
            },
            "tags_all": {
              "Name": "cloudshirt"
            },
            "timeouts": null,
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInJlYWQiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        }
      ]
    }
  ],
  "check_results": null
}
